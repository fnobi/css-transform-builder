type TupleOfNumbers<Num extends number, Acc extends number[] = []> = Acc["length"] extends Num ? Acc : TupleOfNumbers<Num, [...Acc, number]> | (Acc["length"] extends 0 ? never : Acc);
type TranslateUnit = "px" | "em" | "rem" | "vw" | "vh" | "%" | "svh" | "svw" | "lvh" | "lvw" | "vmax" | "vmin" | "lh" | "rlh" | "in" | "pt";
type RotateUnit = "deg" | "rad" | "grad" | "turn";
export default class CSSTransformBuilder {
    private readonly queue;
    constructor(queue?: string[]);
    private addOperation;
    private addOperationNumbers;
    scale(...nums: TupleOfNumbers<3>): CSSTransformBuilder;
    scaleX(x: number): CSSTransformBuilder;
    scaleY(y: number): CSSTransformBuilder;
    scaleZ(z: number): CSSTransformBuilder;
    scale3d(x: number, y: number, z: number): CSSTransformBuilder;
    translate(x: number, y: number, unit?: TranslateUnit): CSSTransformBuilder;
    translateX(x: number, unit?: TranslateUnit): CSSTransformBuilder;
    translateY(y: number, unit?: TranslateUnit): CSSTransformBuilder;
    translateZ(z: number, unit?: TranslateUnit): CSSTransformBuilder;
    translate3d(x: number, y: number, z: number, unit?: TranslateUnit): CSSTransformBuilder;
    rotate(num: number, unit?: RotateUnit): CSSTransformBuilder;
    rotate3d(x: number, y: number, z: number, deg: number, unit?: RotateUnit): CSSTransformBuilder;
    rotateX(num: number, unit?: RotateUnit): CSSTransformBuilder;
    rotateY(num: number, unit?: RotateUnit): CSSTransformBuilder;
    rotateZ(num: number, unit?: RotateUnit): CSSTransformBuilder;
    skew(x: number, y: number, unit?: RotateUnit): CSSTransformBuilder;
    skewX(num: number, unit?: RotateUnit): CSSTransformBuilder;
    skewY(num: number, unit?: RotateUnit): CSSTransformBuilder;
    perspective(num: number): CSSTransformBuilder;
    toString(): string;
}
export declare const buildTransform: (chain: (t: CSSTransformBuilder) => CSSTransformBuilder) => string;
export {};
